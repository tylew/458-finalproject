{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nexport function useStickyState(defaultValue, key) {\n  _s();\n\n  const [value, setValue] = useState(defaultValue); // run code after each render\n\n  useEffect(() => {\n    // after initial page load, see if value with that key in local storage\n    // If so, update\n    // ensure fully loaded on client side\n    const stickyValue = window.localStorage.getItem(key);\n\n    if (stickyValue !== null) {\n      // Stored as json in local storage\n      setValue(JSON.parse(stickyValue));\n    }\n  }, [key]); // Want to separate each piece of logic into their own calls\n\n  useEffect(() => {\n    // If value contenta change\n    // Set local storage to that value\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n}\n\n_s(useStickyState, \"PwEVz8OyEQvpG3u4T0eGycqGeu8=\");","map":{"version":3,"sources":["/Users/lewis/Desktop/NextJS/p5-finalproject/src/hooks/useStickyState.js"],"names":["useEffect","useState","useStickyState","defaultValue","key","value","setValue","stickyValue","window","localStorage","getItem","JSON","parse","setItem","stringify"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AAIA,OAAO,SAASC,cAAT,CAAwBC,YAAxB,EAAsCC,GAAtC,EAA2C;AAAA;;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACE,YAAD,CAAlC,CAD8C,CAG9C;;AACAH,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AAEA;AAEA,UAAMO,WAAW,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAApB;;AAEA,QAAIG,WAAW,KAAK,IAApB,EAA0B;AAEtB;AACAD,MAAAA,QAAQ,CAACK,IAAI,CAACC,KAAL,CAAWL,WAAX,CAAD,CAAR;AACH;AACJ,GAbQ,EAaN,CAACH,GAAD,CAbM,CAAT,CAJ8C,CAmB9C;;AACAJ,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACAQ,IAAAA,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4BT,GAA5B,EAAiCO,IAAI,CAACG,SAAL,CAAeT,KAAf,CAAjC;AACH,GAJQ,EAIN,CAACD,GAAD,EAAMC,KAAN,CAJM,CAAT;AAMA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACH;;GA3BeJ,c","sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react\"\n\n\n\nexport function useStickyState(defaultValue, key) {\n    const [value, setValue] = useState(defaultValue);\n\n    // run code after each render\n    useEffect( () => {\n        // after initial page load, see if value with that key in local storage\n        // If so, update\n\n        // ensure fully loaded on client side\n\n        const stickyValue = window.localStorage.getItem(key)\n\n        if (stickyValue !== null) {\n\n            // Stored as json in local storage\n            setValue(JSON.parse(stickyValue))\n        }\n    }, [key] )\n\n    // Want to separate each piece of logic into their own calls\n    useEffect( () => {\n        // If value contenta change\n        // Set local storage to that value\n        window.localStorage.setItem(key, JSON.stringify(value))\n    }, [key, value] )\n\n    return [value, setValue]\n}"]},"metadata":{},"sourceType":"module"}