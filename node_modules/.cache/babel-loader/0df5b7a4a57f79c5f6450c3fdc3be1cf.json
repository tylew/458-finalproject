{"ast":null,"code":"import _slicedToArray from\"/Users/lewis/Desktop/NextJS/p5-finalproject/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect}from\"react\";import{useState}from\"react\";export function useStickyState(defaultValue,key){var _useState=useState(defaultValue),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];// run code after each render\nuseEffect(function(){// after initial page load, see if value with that key in local storage\n// If so, update\n// ensure fully loaded on client side\nvar stickyValue=window.localStorage.getItem(key);if(stickyValue!==null){// Stored as json in local storage\nsetValue(JSON.parse(stickyValue));}},[key]);// Want to separate each piece of logic into their own calls\nuseEffect(function(){// If value contenta change\n// Set local storage to that value\nwindow.localStorage.setItem(key,JSON.stringify(value));},[key,value]);return[value,setValue];}","map":{"version":3,"sources":["/Users/lewis/Desktop/NextJS/p5-finalproject/src/hooks/useStickyState.js"],"names":["useEffect","useState","useStickyState","defaultValue","key","value","setValue","stickyValue","window","localStorage","getItem","JSON","parse","setItem","stringify"],"mappings":"kKAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,OAASC,QAAT,KAAyB,OAAzB,CAIA,MAAO,SAASC,CAAAA,cAAT,CAAwBC,YAAxB,CAAsCC,GAAtC,CAA2C,eACpBH,QAAQ,CAACE,YAAD,CADY,wCACvCE,KADuC,eAChCC,QADgC,eAG9C;AACAN,SAAS,CAAE,UAAM,CACb;AACA;AAEA;AAEA,GAAMO,CAAAA,WAAW,CAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAApB,CAEA,GAAIG,WAAW,GAAK,IAApB,CAA0B,CAEtB;AACAD,QAAQ,CAACK,IAAI,CAACC,KAAL,CAAWL,WAAX,CAAD,CAAR,CACH,CACJ,CAbQ,CAaN,CAACH,GAAD,CAbM,CAAT,CAeA;AACAJ,SAAS,CAAE,UAAM,CACb;AACA;AACAQ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4BT,GAA5B,CAAiCO,IAAI,CAACG,SAAL,CAAeT,KAAf,CAAjC,EACH,CAJQ,CAIN,CAACD,GAAD,CAAMC,KAAN,CAJM,CAAT,CAMA,MAAO,CAACA,KAAD,CAAQC,QAAR,CAAP,CACH","sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react\"\n\n\n\nexport function useStickyState(defaultValue, key) {\n    const [value, setValue] = useState(defaultValue);\n\n    // run code after each render\n    useEffect( () => {\n        // after initial page load, see if value with that key in local storage\n        // If so, update\n\n        // ensure fully loaded on client side\n\n        const stickyValue = window.localStorage.getItem(key)\n\n        if (stickyValue !== null) {\n\n            // Stored as json in local storage\n            setValue(JSON.parse(stickyValue))\n        }\n    }, [key] )\n\n    // Want to separate each piece of logic into their own calls\n    useEffect( () => {\n        // If value contenta change\n        // Set local storage to that value\n        window.localStorage.setItem(key, JSON.stringify(value))\n    }, [key, value] )\n\n    return [value, setValue]\n}"]},"metadata":{},"sourceType":"module"}